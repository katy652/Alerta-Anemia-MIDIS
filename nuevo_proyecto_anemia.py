# =============================================================================
# üìä SISTEMA DE DIAGN√ìSTICO DE RIESGO DE ANEMIA (Versi√≥n IPv4 Fix)
# =============================================================================
import streamlit as st
import pandas as pd
import joblib
import os
import socket
from supabase import create_client, Client

# =============================================================================
# üîê CONFIGURACI√ìN DE SUPABASE
# =============================================================================
@st.cache_resource
def init_supabase_client() -> Client:
    """Inicializa el cliente de Supabase con IPv4 forzado y validaci√≥n de conexi√≥n."""
    try:
        # 1Ô∏è‚É£ Leer credenciales desde st.secrets o variables de entorno
        url = st.secrets.get("SUPABASE_URL") or os.environ.get("SUPABASE_URL")
        key = st.secrets.get("SUPABASE_KEY") or os.environ.get("SUPABASE_KEY")

        if not url or not key:
            st.error("‚ö†Ô∏è ERROR: No se encontraron las credenciales de Supabase (URL o KEY).")
            return None

        # 2Ô∏è‚É£ Forzar uso de IPv4 (evita error Errno -2)
        domain = url.replace("https://", "").replace("/", "")
        try:
            ipv4_info = socket.getaddrinfo(domain, None, socket.AF_INET)
            ipv4_address = ipv4_info[0][4][0]
            ipv4_url = url.replace(domain, ipv4_address)
        except Exception as dns_error:
            st.warning(f"No se pudo resolver IPv4 ({dns_error}), usando URL original.")
            ipv4_url = url

        # 3Ô∏è‚É£ Crear cliente
        supabase: Client = create_client(ipv4_url, key)

        # 4Ô∏è‚É£ Prueba r√°pida de conexi√≥n
        try:
            supabase.table("alertas").select("dni").limit(1).execute()
            st.success("‚úÖ Conexi√≥n a Supabase establecida correctamente (IPv4).")
            return supabase
        except Exception as api_e:
            st.error(f"‚ùå Error al conectar con Supabase REST API: {api_e}")
            return None

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error inesperado al inicializar Supabase: {e}")
        return None


# =============================================================================
# ‚öôÔ∏è CARGA DE MODELO DE PREDICCI√ìN
# =============================================================================
@st.cache_resource
def cargar_modelo():
    try:
        modelo = joblib.load("modelo_anemia.pkl")
        st.success("Modelo de predicci√≥n cargado correctamente.")
        return modelo
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None


# =============================================================================
# ü©∫ INTERFAZ PRINCIPAL DE LA APLICACI√ìN
# =============================================================================
def main():
    st.title("ü©∏ Informe Personalizado y Diagn√≥stico de Riesgo de Anemia (v2.1 H√≠brida)")
    
    # Inicializar conexi√≥n Supabase
    supabase = init_supabase_client()
    modelo = cargar_modelo()

    # Si no hay conexi√≥n o modelo, no continuar
    if supabase is None or modelo is None:
        st.stop()

    # Secci√≥n de entrada de datos
    st.header("1Ô∏è‚É£ Factores Cl√≠nicos y Demogr√°ficos")
    edad = st.number_input("Edad (a√±os)", min_value=0, max_value=99, value=10)
    hemoglobina = st.number_input("Hemoglobina (g/dL)", min_value=0.0, max_value=25.0, value=12.5)
    sexo = st.selectbox("Sexo", ["Femenino", "Masculino"])
    zona_rural = st.selectbox("¬øVive en zona rural?", ["S√≠", "No"])
    agua_segura = st.selectbox("¬øTiene acceso a agua segura?", ["S√≠", "No"])
    saneamiento = st.selectbox("¬øCuenta con saneamiento b√°sico?", ["S√≠", "No"])
    programa = st.selectbox("¬øRecibe programa nutricional?", ["S√≠", "No"])
    suplementos = st.selectbox("¬øRecibi√≥ suplementos de hierro?", ["S√≠", "No"])

    if st.button("üîç Generar Diagn√≥stico"):
        try:
            entrada = pd.DataFrame({
                "Edad": [edad],
                "Hemoglobina": [hemoglobina],
                "Sexo": [sexo],
                "Zona_Rural": [zona_rural],
                "Agua_Segura": [agua_segura],
                "Saneamiento": [saneamiento],
                "Programa": [programa],
                "Suplementos": [suplementos]
            })

            # Realizar predicci√≥n
            prediccion = modelo.predict(entrada)[0]
            riesgo = "ALTO" if prediccion == 1 else "BAJO"

            st.success(f"ü©∏ Riesgo estimado de anemia: **{riesgo}**")

            # Guardar en Supabase (si la conexi√≥n existe)
            if supabase:
                supabase.table("alertas").insert({
                    "dni": "0000",
                    "edad": edad,
                    "hemoglobina": hemoglobina,
                    "riesgo": riesgo
                }).execute()
                st.info("Registro guardado en Supabase correctamente ‚úÖ")

        except Exception as e:
            st.error(f"Error al procesar la predicci√≥n: {e}")


if __name__ == "__main__":
    main()

