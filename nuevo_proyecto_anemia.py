import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime

# IMPORTACIONES ESPEC√çFICAS DE SUPABASE
from supabase.client import create_client, Client


# ==============================================================================
# 1. INICIALIZACI√ìN DE COMPONENTES EXTERNOS (MODELO Y SUPABASE)
# ==============================================================================

# ‚úÖ Inicializaci√≥n del Cliente de Supabase (Cacheado y con Manejo de Errores)
@st.cache_resource
def init_supabase_client() -> Client:
    """Inicializa y retorna el cliente de Supabase una sola vez, leyendo del entorno."""
    try:
        url: str = os.environ.get("SUPABASE_URL")
        key: str = os.environ.get("SUPABASE_KEY")
        
        if not url or not key:
            # st.error("ERROR: Las credenciales SUPABASE_URL o SUPABASE_KEY NO est√°n definidas en los Secrets.")
            return None
            
        supabase: Client = create_client(url, key)

        # üü¢ PRUEBA DE CONEXI√ìN A√ëADIDA: Verifica que la conexi√≥n REST funciona
        try:
            # Hacemos una consulta simple para verificar la conectividad REST API
            supabase.table("alertas").select("dni").limit(1).execute()
            # st.success("‚úÖ Conexi√≥n a Supabase REST API establecida.")
            return supabase
        except Exception as api_e:
            # Muestra un error si la conexi√≥n REST falla (t√≠picamente por red/firewall)
            st.error(f"‚ùå FALLO CR√çTICO DE RED/LIBRER√çA: La conexi√≥n a Supabase fall√≥. Esto suele ser por bloqueo de red (IPv4/IPv6). Error: {api_e}")
            return None
            
    except Exception as e:
        # Captura cualquier error de inicializaci√≥n
        # st.error(f"Error de inicializaci√≥n de Supabase: {e}") 
        return None

# üöÄ Inicializaci√≥n GLOBAL del cliente de Supabase (Se ejecuta una sola vez)
SUPABASE_CLIENT = init_supabase_client()


# ‚úÖ Carga del Modelo Machine Learning (Cacheado)
@st.cache_resource
def load_model():
    """Carga el modelo de ML y la lista de columnas para garantizar el orden."""
    try:
        model = joblib.load('modelo_columns.joblib')
        return model, list(model.feature_names_in_)
    except Exception as e:
        st.error(f"Error al cargar el modelo o las columnas: {e}")
        return None, None

MODELO, COLUMNAS_MODELO = load_model()


# ==============================================================================
# 2. FUNCIONES DE L√ìGICA DE NEGOCIO Y PREDICCI√ìN
# ==============================================================================

def generar_prediccion(df_input: pd.DataFrame, modelo, columnas_modelo) -> tuple:
    """Asegura el orden de las columnas y genera la predicci√≥n y las probabilidades."""
    
    df_modelo = df_input.reindex(columns=columnas_modelo, fill_value=0)
    prediccion = modelo.predict(df_modelo)[0]
    probabilidades = modelo.predict_proba(df_modelo)[0]
    
    etiquetas = {0: 'RIESGO: BAJO RIESGO', 1: 'RIESGO: MEDIO RIESGO', 2: 'RIESGO: ALTO RIESGO'}
    resultado_riesgo = etiquetas.get(prediccion, 'RIESGO: DESCONOCIDO')
    
    return resultado_riesgo, probabilidades

def registrar_alerta_db(data_alerta: dict) -> bool:
    """Registra una alerta en la tabla 'alertas' de Supabase."""
    
    if not SUPABASE_CLIENT:
        st.error("‚ùå No se pudo registrar: La conexi√≥n a Supabase fall√≥.")
        return False

    try:
        # üü¢ Aseg√∫rate de que las claves coincidan con el esquema de la tabla 'alertas' (image_1df544.png)
        data_to_insert = {
            'dni': data_alerta['DNI'],
            'nombre_apellido': data_alerta['Nombre_Apellido'],
            'edad': data_alerta['Edad'],
            'hemoglobina_g_dL': data_alerta['Hemoglobina_g_dL'], 
            'riesgo': data_alerta['Riesgo'],
            'fecha_alerta': data_alerta['Fecha_Alerta'],
            'estado': data_alerta['Estado'],
            'sugerencias': data_alerta['Sugerencias'],
        }

        # Ejecutar la inserci√≥n
        response = SUPABASE_CLIENT.table('alertas').insert(data_to_insert).execute()
        
        # üü¢ L√ìGICA DE VERIFICACI√ìN DE INSERCI√ìN (Captura errores de la base de datos)
        if response.error:
            st.error(f"‚ùå Error de Inserci√≥n Supabase. C√≥digo: {response.error.code}. Mensaje: {response.error.message}")
            return False
        else:
            st.success(f"‚úÖ Caso registrado ({data_alerta['DNI']}) con √©xito.")
            return True

    except Exception as e:
        # Captura errores de red/timeouts que ocurren durante la ejecuci√≥n de la inserci√≥n
        st.error(f"‚ùå FALLO DE RED/TIMEOUT: El intento de inserci√≥n fall√≥ por un problema de conectividad. Error: {e}")
        return False

# ==============================================================================
# 3. CONFIGURACI√ìN DE STREAMLIT (UI)
# ==============================================================================

st.set_page_config(layout="wide", page_title="Diagn√≥stico de Riesgo de Anemia")
st.title("Informe Personalizado y Diagn√≥stico de Riesgo de Anemia (v2.1 H√≠brida)")

# Definici√≥n de la estructura de las tabs
tab_informe, tab_monitoreo = st.tabs(["üìù Generar Informe (Predicci√≥n)", "üìä Monitoreo y Reportes"])

with tab_informe:
    with st.form(key='informe_form'):
        
        st.header("0. Datos de Identificaci√≥n y Contacto")
        col1, col2 = st.columns(2)
        with col1:
            dni = st.text_input("DNI/Identificaci√≥n", key="input_dni")
        with col2:
            nombre_apellido = st.text_input("Nombre y Apellido", key="input_nombre")

        # ... (Resto del formulario de entrada de datos) ...
        # Se omiten los inputs repetitivos para concisi√≥n, asumiendo que los valores
        # de 'edad', 'hemoglobina', etc. se obtienen de los inputs en el formulario.

        st.header("1. Factores Cl√≠nicos y Demogr√°ficos Clave")
        col3, col4, col5 = st.columns(3)
        with col3:
            edad = st.number_input("Edad (a√±os)", min_value=0, max_value=120, key="input_edad")
        with col4:
            hemoglobina = st.number_input("Hemoglobina (g/dL)", min_value=0.0, max_value=20.0, step=0.1, key="input_hemoglobina")
        with col5:
            sexo = st.selectbox("Sexo", ["Femenino", "Masculino"], key="input_sexo")

        st.header("2. Factores Socioecon√≥micos y Contextuales")
        col6, col7, col8 = st.columns(3)
        with col6:
            agua_segura = st.selectbox("Acceso a agua segura", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_agua")
        with col7:
            saneamiento = st.selectbox("Saneamiento b√°sico", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_saneamiento")
        with col8:
            zona_rural = st.selectbox("Vive en zona rural", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_rural")

        st.header("3. Acceso a Programas y Servicios")
        col9, col10, col11 = st.columns(3)
        with col9:
            programa_nutricional = st.selectbox("Recibe programa nutricional", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_programa")
        with col10:
            control_cred = st.selectbox("Control de CRED regular", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_cred")
        with col11:
            suplementos_hierro = st.selectbox("Recibi√≥ suplementos de hierro", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No", key="input_hierro")


        submitted = st.form_submit_button("GENERAR INFORME PERSONALIZADO Y REGISTRAR CASO")
    
    
    # L√≥gica al enviar el formulario
    if submitted:
        if MODELO is None or COLUMNAS_MODELO is None:
            st.error("No se puede generar el informe. El modelo ML no se carg√≥ correctamente.")
        elif not dni or not nombre_apellido:
            st.warning("Por favor, complete los campos DNI y Nombre/Apellido para el registro.")
        else:
            # 1. Preparar datos para la predicci√≥n
            data_dict = {
                'Edad': edad,
                'Hemoglobina_g_dL': hemoglobina,
                'Acceso a agua segura_S√≠': agua_segura,
                'Saneamiento b√°sico_S√≠': saneamiento,
                'Vive en zona rural_S√≠': zona_rural,
                'Recibe programa nutricional_S√≠': programa_nutricional,
                'Control de CRED regular_S√≠': control_cred,
                'Recibi√≥ suplementos de hierro_S√≠': suplementos_hierro
            }
            df_prediccion = pd.DataFrame([data_dict])
            
            # 2. Generar la predicci√≥n
            riesgo, probabilidades = generar_prediccion(df_prediccion, MODELO, COLUMNAS_MODELO)
            prob_riesgo = probabilidades[MODELO.predict(df_prediccion)[0]] * 100 

            # 3. Mostrar el informe
            st.header("An√°lisis y Reporte de Control Oportuno")
            st.markdown(f"## {riesgo}", unsafe_allow_html=True)
            st.markdown(f"**Probabilidad de {riesgo.split(': ')[1]}:** {prob_riesgo:.2f}%")
            
            # 4. Generar sugerencias
            sugerencias = f"Recomendaci√≥n para {riesgo.split(': ')[1]}. {sexo} de {edad} a√±os."
            st.subheader("Sugerencias Personalizadas de Intervenci√≥n Oportuna:")
            st.info(sugerencias)

            # 5. Preparar y Registrar en Supabase
            data_alerta_db = {
                'DNI': dni,
                'Nombre_Apellido': nombre_apellido,
                'Edad': edad,
                'Hemoglobina_g_dL': hemoglobina,
                'Riesgo': riesgo.split(': ')[1],
                'Fecha_Alerta': datetime.now().isoformat(),
                'Estado': 'PENDIENTE', 
                'Sugerencias': sugerencias
            }
            
            # Intentar el registro en la base de datos
            registro_exitoso = registrar_alerta_db(data_alerta_db)

            if not registro_exitoso:
                st.error("‚ùå El caso se proces√≥ (riesgo: {riesgo}), pero el registro en la base de datos fall√≥. Verifique el mensaje de error anterior para el diagn√≥stico (red/datos).")


with tab_monitoreo:
    st.header("Visualizaci√≥n de Casos Registrados")
    
    if SUPABASE_CLIENT:
        try:
            # Trae todos los datos de la tabla 'alertas'
            response = SUPABASE_CLIENT.table('alertas').select('*').order('fecha_alerta', desc=True).execute()
            
            if response.error:
                st.error(f"Error al cargar datos del monitoreo: {response.error.message}")
            elif len(response.data) > 0:
                df_monitoreo = pd.DataFrame(response.data)
                
                # Formato y limpieza para visualizaci√≥n
                df_monitoreo['fecha_alerta'] = pd.to_datetime(df_monitoreo['fecha_alerta']).dt.strftime('%Y-%m-%d %H:%M')
                
                # ... (Resto de la l√≥gica de monitoreo) ...
                # Se omite el c√≥digo de visualizaci√≥n de tablas/gr√°ficos para concisi√≥n

                # Muestra el DataFrame, asumiendo que el c√≥digo de visualizaci√≥n es funcional
                st.dataframe(df_monitoreo, use_container_width=True)
                
            else:
                st.info("Actualmente no hay casos registrados en la tabla de alertas. Registre un caso en la pesta√±a 'Generar Informe'.")

        except Exception as e:
            st.error(f"‚ùå Error al intentar conectar con la tabla 'alertas' para monitoreo: {e}")
    else:
        st.warning("‚ö†Ô∏è La conexi√≥n a Supabase no est√° disponible. No se pueden cargar los datos de monitoreo.")
